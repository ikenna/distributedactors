

akka {
    # Turn on debug logging for the actor system. You probably need this set to debug during development or debugging
    # Possible values are "error", "warning", "info", "debug" and "off"
    # Akka will log at logLevel, and if a logback Logger its used it will further filter the logs.
    # E.g if akka.logLevel = debug, and logback rootLevel = DEBUG, then logs will be at debug level
    # if akka.logLevel = INFO, and logback rootLevel = DEBUG, then logs will be at INFO level
    # if akka.logLevel = DEBUG, and logback rootLevel = INFO, then no logs will be produced
    loglevel = debug

    # On startup, log the entire config used by the application at info level
    log-config-on-start = off

    # When the actor system starts (or stops), messages are printed directly to standard out
    # instead of using the loggers. Possible values are "error", "warning", "info", "debug" and "off"
    # for these messages. It can also be turned off completely by stdout-loglevel=OFF
    stdout-loglevel = off

    #To use SL4J, include the akka-slf4j.jar and logback-classic as dependencies in build.sbt, include logback.xml in
    # the src/main/resources folder, and specify the Slf4jLogger in the config as below
    # loggers = ["akka.event.slf4j.Slf4jLogger"]


    actor {

        # These settings apply when akka.logLevel = debug. Most of these messages from these settings are logged
        # at debug level (except for router-misconfiguration which logs at WARNING level)
        debug {

            # Log all received messages at DEBUG level. To do this, you will need akka.logLevel set at DEBUG, and you will
            # need to wrap the actors receive method in akka.event.LoggingReceive e.g
            #  override def receive = {
            #      akka.event.LoggingReceive {
            #        case AMessage() => println("Received a message")
            #      }
            #    }
            #
            receive = off

            # Used for logging messages that implement the AutoReceivedMessage interface, such as PoisonPill, Kill, Terminated() and Identify()
            # Sample output if an actor is sent a PoisonPill : "[DEBUG] [08/21/2014 15:19:44.771] [LoggingExample-akka.actor.default-dispatcher-3] [akka://LoggingExample/user/$a] received AutoReceiveMessage Envelope(PoisonPill,Actor[akka://LoggingExample/deadLetters])"
            autoreceive = off

            # Detailed logging of FSM events and transitions. For this to work, the Actor must implement LoggingFSM e.g
            # class MyActor extends Actor with FSM[State, Data] with  LoggingFSM[State, Data]
            fsm = off

            # Logs actor lifecycle - e.g. start, restart, death
            # Sample output : "[DEBUG] [08/21/2014 15:23:22.488] [LoggingExample-akka.actor.default-dispatcher-5] [akka://LoggingExample/user/$a] started (MyActor@52606914)"
            lifecycle = off


            # Logs unhandled messages
            # Sample output when an unhandled FooMessage() is received : "[DEBUG] [08/21/2014 15:32:28.281] [LoggingExample-akka.actor.default-dispatcher-3] [akka://LoggingExample/user/$a] unhandled message from Actor[akka://LoggingExample/deadLetters]: FooMessage()"
            unhandled = on


            # logs changes to the Event Stream
            # Sample message : "[DEBUG] [08/21/2014 15:33:27.388] [LoggingExample-akka.actor.default-dispatcher-3] [EventStream] subscribing Actor[akka://LoggingExample/system/deadLetterListener#-1758920269] to channel class akka.actor.DeadLetter"
            event-stream = on

            # Logs router misconfiguration at WARN level
            router-misconfiguration = off
        }
    }
}